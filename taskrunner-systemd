#!/bin/sh

# ----------------------------------------------------------------------
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# --
# Copyright 2018-2020 Andi Dittrich <https://aenon-dynamics.com>
# ----------------------------------------------------------------------

# taskrunner-sh https://github.com/AenonDynamics/taskrunner-sh
VERSION="0.5.0"

show_usage(){
    cat << EOF
Usage: taskrunner-systemd <name> <unit>
     --help                  Displays this help
     --version               Displays version
EOF
    exit 0
}

show_version(){
    cat << EOF
taskrunner-systemd 
 - Version: ${VERSION}
 - License: MPL-2.0 http://mozilla.org/MPL/2.0/
 - Repository: https://github.com/AenonDynamics/taskrunner-sh
EOF
    exit 0
}

# simple processing because of variadic arguments
[ "$1" = "--help" ] && show_usage
[ "$1" = "--version" ] && show_version

# task config available ?
[ ! -f "/etc/taskrunner.conf" ] && { echo >&2 "configuration file </etc/taskrunner.conf> not found"; exit 1; }

# load config
. /etc/taskrunner.conf

# extract task title
TASK_NAME=$1

# extract unit name
UNITNAME=$2

# taskname given ?
[ -z "$TASK_NAME" ] && { echo >&2 "taskname not set"; exit 1; }

# unitname given ?
[ -z "$UNITNAME" ] && { echo >&2 "unit not set"; exit 1; }

# get last service invocation
INVOCATION_ID=$(systemctl show --value -p InvocationID $UNITNAME)

# invocationid set ?
[ -z "$INVOCATION_ID" ] && { echo >&2 "InvocationID not available for $UNITNAME"; exit 1; }

# get command start/stop time
TASK_START=$(systemctl show --value -p ExecMainStartTimestamp $UNITNAME)
TASK_STOP=$(systemctl show --value -p ExecMainExitTimestamp $UNITNAME)

# get status code
TASK_STATUS=$(systemctl show --value -p ExecMainStatus $UNITNAME)

# get log of last invocation from journald
TASK_OUTPUT=$(journalctl _SYSTEMD_INVOCATION_ID=$INVOCATION_ID)

# send data - hide output: fail on http status >=400
# set api key within header
# avoid curl "Argument list too long" issue - use stdin
# use empty "Expect" header to avoid HTTP417 issues
curl \
    --fail \
    --silent \
    --show-error \
    --http1.1 \
    --header "Expect: " \
    --header "X-APIKEY: $API_KEY" \
    --data-urlencode "title=$TASK_NAME" \
    --data-urlencode "status=$TASK_STATUS" \
    --data-urlencode "t0=$TASK_START" \
    --data-urlencode "t1=$TASK_STOP" \
    --data-urlencode "content@-" \
    --request POST \
    "$API_URL" \
    > /dev/null <<CURL_DATA
${TASK_OUTPUT}
CURL_DATA

# store status code
LOG_STATUS=$?

# curl operation success?
[ $LOG_STATUS -ne 0 ] && { echo >&2 "tasklogging failed"; }

# default exit code
exit $LOG_STATUS